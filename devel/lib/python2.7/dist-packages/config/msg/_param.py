# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from config/param.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class param(genpy.Message):
  _md5sum = "1411ae11535e1135c0228980116d734a"
  _type = "config/param"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 NMS_THRESH
float32 CONF_THRESH
bool if_shot
bool if_show
int32 k_x0
int32 k_y0
int32 k_z0
int32 k_x1
int32 k_y1
int32 k_z1"""
  __slots__ = ['NMS_THRESH','CONF_THRESH','if_shot','if_show','k_x0','k_y0','k_z0','k_x1','k_y1','k_z1']
  _slot_types = ['float32','float32','bool','bool','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       NMS_THRESH,CONF_THRESH,if_shot,if_show,k_x0,k_y0,k_z0,k_x1,k_y1,k_z1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(param, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.NMS_THRESH is None:
        self.NMS_THRESH = 0.
      if self.CONF_THRESH is None:
        self.CONF_THRESH = 0.
      if self.if_shot is None:
        self.if_shot = False
      if self.if_show is None:
        self.if_show = False
      if self.k_x0 is None:
        self.k_x0 = 0
      if self.k_y0 is None:
        self.k_y0 = 0
      if self.k_z0 is None:
        self.k_z0 = 0
      if self.k_x1 is None:
        self.k_x1 = 0
      if self.k_y1 is None:
        self.k_y1 = 0
      if self.k_z1 is None:
        self.k_z1 = 0
    else:
      self.NMS_THRESH = 0.
      self.CONF_THRESH = 0.
      self.if_shot = False
      self.if_show = False
      self.k_x0 = 0
      self.k_y0 = 0
      self.k_z0 = 0
      self.k_x1 = 0
      self.k_y1 = 0
      self.k_z1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f2B6i().pack(_x.NMS_THRESH, _x.CONF_THRESH, _x.if_shot, _x.if_show, _x.k_x0, _x.k_y0, _x.k_z0, _x.k_x1, _x.k_y1, _x.k_z1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.NMS_THRESH, _x.CONF_THRESH, _x.if_shot, _x.if_show, _x.k_x0, _x.k_y0, _x.k_z0, _x.k_x1, _x.k_y1, _x.k_z1,) = _get_struct_2f2B6i().unpack(str[start:end])
      self.if_shot = bool(self.if_shot)
      self.if_show = bool(self.if_show)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f2B6i().pack(_x.NMS_THRESH, _x.CONF_THRESH, _x.if_shot, _x.if_show, _x.k_x0, _x.k_y0, _x.k_z0, _x.k_x1, _x.k_y1, _x.k_z1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.NMS_THRESH, _x.CONF_THRESH, _x.if_shot, _x.if_show, _x.k_x0, _x.k_y0, _x.k_z0, _x.k_x1, _x.k_y1, _x.k_z1,) = _get_struct_2f2B6i().unpack(str[start:end])
      self.if_shot = bool(self.if_shot)
      self.if_show = bool(self.if_show)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2B6i = None
def _get_struct_2f2B6i():
    global _struct_2f2B6i
    if _struct_2f2B6i is None:
        _struct_2f2B6i = struct.Struct("<2f2B6i")
    return _struct_2f2B6i
